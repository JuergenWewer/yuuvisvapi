<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>juergenwewer.optimal</groupId>
  <artifactId>yuuvis-v-api</artifactId>
  <version>1.9.6-SNAPSHOT</version>

  <properties>
    <dockerrepository>10.211.55.4:32132</dockerrepository>
    <vertx.version>4.0.3</vertx.version>
    <junit-jupiter.version>5.7.0</junit-jupiter.version>
    <main.verticle>io.vertx.starter.ApiVerticle</main.verticle>
<!--    <main.verticle>io.vertx.starter.MainVerticle</main.verticle>-->
  </properties>

  <distributionManagement>
    <snapshotRepository>
      <id>optimal-maven-snapshots</id>
      <name>optimal-maven-snapshots</name>
      <url>http://10.211.55.4:32000/repository/maven-snapshots/</url>
    </snapshotRepository>
    <repository>
      <id>optimal-maven-releases</id>
      <name>optimal-maven-releases</name>
      <url>http://10.211.55.4:32000/repository/maven-releases/</url>
    </repository>
  </distributionManagement>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-stack-depchain</artifactId>
        <version>${vertx.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-openapi</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-api-contract</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-resolver-dns-native-macos</artifactId>
      <version>4.1.63.Final</version>
      <classifier>osx-x86_64</classifier>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.12</version>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.1</version>
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.21.0</version>
        <dependencies>
          <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-surefire-provider</artifactId>
            <version>1.2.0</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.4</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>io.vertx.core.Launcher</Main-Class>
                    <Main-Verticle>${main.verticle}</Main-Verticle>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
              </transformers>
              <artifactSet>
              </artifactSet>
              <outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.0.0</version>
        <configuration>
          <mainClass>io.vertx.core.Launcher</mainClass>
          <arguments>
            <argument>run</argument>
            <argument>${main.verticle}</argument>
          </arguments>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <!-- Remove existing image from local repo -->
          <execution>
            <id>docker-clean</id>
            <phase>deploy</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>rmi</argument>
                <argument>${dockerrepository}/${project.artifactId}:${project.version}</argument>
                <argument>-f</argument>
              </arguments>
            </configuration>
          </execution>

          <!--
            Create new docker image using Dockerfile which must be present in current working directory.
            Tag the image using maven project version information.
          -->
          <execution>
            <id>docker-build</id>
            <phase>deploy</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>build</argument>
                <argument>-t</argument>
                <argument>${dockerrepository}/${project.artifactId}:${project.version}</argument>
                <argument>.</argument>
              </arguments>
            </configuration>
          </execution>

          <!-- Login and Push the image to a docker repo. -->
<!--          <execution>-->
<!--            <id>docker-login</id>-->
<!--            <phase>install</phase>-->
<!--            <goals>-->
<!--              <goal>exec</goal>-->
<!--            </goals>-->

<!--            <configuration>-->
<!--              <executable>docker</executable>-->
<!--              <workingDirectory>${project.basedir}</workingDirectory>-->
<!--              <arguments>-->
<!--                <argument>login</argument>-->
<!--                <argument>-u</argument>-->
<!--&lt;!&ndash;                <argument>${docker.user}</argument>&ndash;&gt;-->
<!--                <argument>-p</argument>-->
<!--&lt;!&ndash;                <argument>${docker.password}</argument>&ndash;&gt;-->
<!--&lt;!&ndash;                <argument>${docker.url}</argument>&ndash;&gt;-->
<!--              </arguments>-->
<!--            </configuration>-->
<!--          </execution>-->
          <execution>
            <id>docker-push</id>
            <phase>deploy</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>push</argument>
<!--                <argument>10.211.55.4:32132/yuuvis-v-api:1.1-SNAPSHOT</argument>-->
                <argument>${dockerrepository}/${project.artifactId}:${project.version}</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
